libraries/opensk/ctap/data_formats.rs line 286 struct MakeCredentialExtensions I'm adding a line for recovery. This will probably break the entire system.
Added recovery as a struct field on line 327 of the same file.
Added recovery: false in the test on line 1691 of the same file.
Added let recovery = false on line 321 of the same file.

Interestingly, it compiled just fine after that and doesn't seem to have broken the entire system, so that's nifty.

Added let recovery = extensions.recovery to line 881 of libraries/opensk/ctap/mod.rs
It still compiles!

Added a new enum on line 284 of data_formats.rs in ctap called RecoveryExtensionAction and a new struct on line 292 called RecoveryExtensionInputs. The allow_list field in that corresponds to the allowCredentials field in the Yubico instructions, but Rust wants it to be camel case, and google is using allow_list in other parts of the code for a similar thing, I think.

Added recovery.rs to ctap and added pub mod recovery at line 29 of mod.rs in ctap.

Added RecoveryExtensionOutput struct on line 299 of data_formats. The lengths of the arrays in there is currently just a guess, so we'll need to fix that eventually.

Note: I think that the insert function persistent_store/src/store.rs will take any byte array, and I think that I can use the CBOR functions to encode just about anything as a binary string, so I just need to find an available address (I think I read that they don't use anything past 2048) and just store stuff there as CBOR encodings. Hopefully it won't be too difficult.

So I think that env is storing all the information about the key. It has a store() function, which I think accesses the storage for the key, and store() has a find() and insert() function that get the value at a key or write a value to a key. I think that we can store values at 1000, because they say that it's reserved for future credential related objects, which I think is what our backup information would be.

If debugging is turned on, I think that debug_ctap!(env, string) will print string to console, which could be useful.

I think that opensk/src/ctap/storage.rs, line 48, has the function that creates the initial storage. I think we could just add a line to that function that initializes a YK struct and writes it to storage in the correct spot. From there we can do all the other edits to storage that we might want to do.

Added BackupData struct to data_formats.rs on line 309. It has fields for public and private keys and for a state. I'll add the list of recovery seeds later, after I figure out how to format them.

Commented out flags on lines 19 and 61 of crypto/src/ec/point.rs and lines 95 and 100 of crypto/src/ecdh.rs, as well as making from_bytes_compressed and to_bytes_compressed in ecdh.rs public functions.

Added a public function to_bytes to the struct SecKey on line 93 of crypto/src/ecdh.rs

Implemented init() for BackupData on line 315 of data_formats.rs.

Note: I keep doing stuff with mutable references to env, which I think means I'm editing the actual environment of the key, which is probably pretty dangerous. I don't think it's a huge deal since we don't care a ton about security right now, but it's something to remember.

Added use statement for BackupData on line 37 of ctap/storage.rs and use statement for cbor_backups from recovery.rs on line 38. Added use key::_RESERVED_CREDENTIALS on line 32.

Made edits on init function on line 52 of ctap/storage.rs so that now it initializes and stores a BackupData struct that will have all the recovery information.

Added get_backup_data function on line 71 of ctap/storage.rs.

Changed USB_DEBUGGING to false in boards/nordic/nrf52840dk_opensk/src/main.rs so that it will print debug to uart.

Added make_backup_data function on line 63 of ctap/storage.rs.

On line 33 of mod.rs I made storage a public module so that I can print stuff in the main loop. Felt cute, might change it later.

*IMPORTANT*
Added something on line 274 of main.rs which WE SHOULD REMOVE because it's just there to print some data, and it also RESETS THE BACKUP STORAGE every time through the loop, so it's not very good to have permanently.

Also added on line 275 to recover and print the backup key to see if it's the same as the one we originally created. Delete 155 and 156 at some point, because they sort of mess up the system.
*Edit* I removed those parts.

Added use AAGUID_LENGTH to data_formats.rs

Added use crypto::ecdh::PubKey to line 26 of data formats.rs

Added use core::fmt::write on line 33 of storage.rs.

Added use::data_formats on line 82 of mod.rs and made the key module public on line 15 of storage.rs

Added some stuff starting around line 746 of mod.rs to try and get something to print when I make a credential. Delete it later. Added use core::fmt::Write on line 82 of mod.rs. Delete it later.

This is currently not compiling, work on that tomorrow.

Added use core::fmt::Write on line 26 of data_formats.rs.

Added || recovery.is_some() on line 886 of mod.rs

Added some processing at line 958 of mod.rs to handle the recovery extension processing. Also added "recovery" => recovery_output at or near line 985 to add the extension output to the output of the whole function.

Impl From<RecoveryExtensionOutput> for cbor::Value on line 311 of data_formats.rs

Added rp_id.clone on line 904 of mod.rs

Added pub recovery: Option<RecoveryExtensionInput> to line 399 of data_formats.rs

I just realized that something I changed when adding recovery to the creation extension struct might have messed up cbor encoding if I'm not careful.

Added recovery = None on line 429 of data_formats.rs. This will be a problem later when we have webauthn working, so be prepared to work with that.

Added recovery: None on line 1783 and 1812 of data_formats.rs as part of some test functions.

Added || extensions.recovery.is_some() on line 1069 of mod.rs

Added recovery processing on line 1087 of mod.rs

There's an error right after that, and I'm not sure how to fix it. I might be able to use Option there, and just send in None to fix that error, because we might not do the recovery in that case, but I could be wrong.

I think I'm going to make a change to the Yubico proposal so that rp_id gets passed in as part of RecoveryExtensionInput. Then I can remove some of the changes I just made and things should work a little better.

Added SecKey to the ecdh use statement on line 27 of data_formats.rs and changed the data types in BackupData to SecKey and PubKey instead of PrivateKey and CoseKey on lines 325 and 326 of the same file. Hopefully that doesn't cause too many problems:)

Added Value to sk_cbor use statement on line 31 of data_formats.rs, and added PairingExtensionAction, PairingExtensionInput and PairingExtensionOutput at or near line 347 of the same file.

Added pub pairing: Option<PairingExtensionInput> on line 375 of data_formats.rs.

Added let pairing = None on line 405 and pairing on line 413 of data_formats.rs. Once Webauthn is working we need to add those options in the cbor map section, but for now we just ignore them.

Added pairing: None on line 1781 of data_formats.rs to make a test work.

Added let pairing = extensions.pairing on line 882

Added a whole bunch of stuff on line 883 to handle the pairing extension.

Added AuthenticatorPairing(PairingExtensionOutput) on line 37 and PairingExtensionOutput on line 16 of response.rs so that I can return that from MakeCredential.

Added ResponseData::AuthenticatorPairing(data) => data.into() on line 56 of the same file so we can encode the result as cbor

Implemented from PairingExtensionOutput for cbor::Value on line 366 of data_formats.rs

Added a print statement on line 882 and line 967 of mod.rs.

Added a print statement on line 747 of mod.rs.

Moved the line on 747 to 861.

Added "recovery" => recovery to line 398 of data_formats.rs.

Impl TryFrom cbor value for RecoveryExtensionInput on line 319 of data_formats.rs.

Impl TryFrom cbor value for RecoveryExtensionAction on line 296 of data_formats.rs.

Added let recovery = recovery.map(RecoveryExtensionAction::try_from).tranpose()?; on line 461 of data_formats.rs.

Added a print statement on line 600 of mod.rs
